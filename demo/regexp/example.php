<?php
//todo Регулярные выражения в php очень медленные, встроенные функции
// на много быстрее. Так что рекомендуется использовать именно их.
// Так же стоит иметь ввиду что они более уязвимы с точки зрения безопасности.
// php поддерживает 2 типа регулярных выражений:
// 1) - PCRE Perl Compatible Reg Exp
// Функции для работы с регулярными выражениями (Perl-совместимые)
// 2) - POSIX - (Portable Operating System Interface)
// в регулярных выражениях обычно относится к набору стандартов, описывающих интерфейсы программирования операционных систем, включая некоторые стандарты для работы с регулярными выражениями.
// В PHP функции POSIX-регулярных выражений реализованы через
// расширение POSIX Regex (также известное как ext/ereg), которое
// предоставляет функции для работы с POSIX-совместимыми регулярными
// выражениями. Например, функция ereg() может использоваться для проверки,
// соответствует ли строка определенному регулярному выражению,
// написанному в стиле POSIX. - deprecated, уже нельзя использовать.
// Пример 1
$subject = '00:04:23:7c:5d:01';

$pattern = '/^([a-f0-9][a-f0-9]:){5}[a-f0-9][a-f0-9]$/';
//todo preg_match — Выполняет проверку на соответствие регулярному
// выражению (PCRE). даёт булев ответ, совпало или не совпало.
// $matches - опциональный параметр, это массив в который запишутся все
// совпадения даже частичные.
preg_match($pattern, $subject, $matches);
echo $matches[0]; // 00:04:23:7с:5d:01

$pattern = '/([a-f0-9]{2}:){5}[a-f0-9]{2}/';
preg_match($pattern, $subject, $matches);
echo $matches[0]; // 00:04:23:7с:5d:01

// Пример 2
$subject = 'John Smith <jsmith@site.com>';
$pattern = '/([^<]+)<([a-zA-Z0-9_-]+@([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+)>/';
preg_match($pattern, $subject, $matches);
print_r($matches);
// [0]=>John Smith <jsmith@site.com>, [1]=>John Smith, [2]=>jsmith@site.com, [3]=>site.

//todo preg_match_all — Выполняет глобальный поиск шаблона в строке.
// Ищет в строке subject все совпадения с шаблоном pattern и помещает
// результат в массив matches в порядке, определяемом комбинацией флагов.
// После нахождения первого соответствия последующие поиски будут осуществляться
// не с начала строки, а от конца последнего найденного вхождения.
// preg_replace — Выполняет поиск и замену по регулярному выражению.
// Выполняет поиск совпадений в строке subject с шаблоном pattern и заменяет
// их на replacement.
// preg_split — Разбивает строку по регулярному выражению.

